{"version":3,"sources":["./src/environments/environment.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, ViewChild, ElementRef } from \"@angular/core\";\nimport * as ScanditSDK from \"scandit-sdk\";\nimport { BarcodePicker, ScanResult } from \"scandit-sdk\";\n\n@Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent {\n  public scannerReady = false;\n  public showButton = false;\n  public showDescription = true;\n  public result = \"\";\n\n  @ViewChild(\"barcodePicker\") barcodePickerElement: ElementRef<HTMLDivElement & { barcodePicker: BarcodePicker }>;\n\n  public onReady(): void {\n    this.scannerReady = true;\n    this.showButton = true;\n  }\n\n  public onScan(scanResult: { detail: ScanResult }): void {\n    const calculatedString = scanResult.detail.barcodes.reduce((result, barcode) => {\n      return `${result} ${ScanditSDK.Barcode.Symbology.toHumanizedName(barcode.symbology)} : ${barcode.data}`;\n    }, \"\");\n\n    this.result = calculatedString;\n  }\n\n  public startBarcodePicker(): void {\n    this.showButton = false;\n    this.showDescription = false;\n\n    this.barcodePickerElement.nativeElement.barcodePicker.setVisible(true).resumeScanning();\n  }\n}\n","<div class=\"container\">\n  <div class=\"logo\"></div>\n  <div class=\"name\">Simple Sample</div>\n  <div id=\"description\" class=\"description\" *ngIf=\"showDescription\">\n    Start the scanner and then aim at a barcode to get the encoded data.\n  </div>\n\n  <div id=\"lib-loading\" *ngIf=\"!scannerReady\">\n    <br />Library is loading, please wait...\n  </div>\n\n  <button id=\"barcode-picker-starter-button\" *ngIf=\"showButton\" (click)=\"startBarcodePicker()\">\n    Start Scanning\n  </button>\n\n  <div id=\"barcode-result\" class=\"result-text\">{{ result }}</div>\n\n  <scandit-barcode-picker\n    #barcodePicker\n    id=\"barcode-picker\"\n    configure.licenseKey=\"YOUR_LICENSE_KEY_IS_NEEDED_HERE\"\n    configure.engineLocation=\"https://cdn.jsdelivr.net/npm/scandit-sdk@5.x/build/\"\n    scanningPaused=\"true\"\n    visible=\"false\"\n    playSoundOnScan=\"true\"\n    vibrateOnScan=\"true\"\n    scanSettings.enabledSymbologies='[\"ean8\", \"ean13\", \"upca\", \"upce\"]'\n    (ready)=\"onReady()\"\n    (scan)=\"onScan($event)\">\n  </scandit-barcode-picker>\n</div>\n","import { BrowserModule } from \"@angular/platform-browser\";\nimport { NgModule } from \"@angular/core\";\nimport { CUSTOM_ELEMENTS_SCHEMA } from \"@angular/core\";\nimport { AppComponent } from \"./app.component\";\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { enableProdMode } from \"@angular/core\";\nimport { platformBrowserDynamic } from \"@angular/platform-browser-dynamic\";\n\nimport { AppModule } from \"./app/app.module\";\nimport { environment } from \"./environments/environment\";\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}